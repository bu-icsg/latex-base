# latexmk-driven build flow
#
# Point of Contact: Schuyler Eldridge <schuyler.eldridge@gmail.com>

#--------------------------------------- Configuration user should modify
# Each one of these needs a set of explicit build rules below. I can't
# use pattern rules because GNU Make doesn't allow for PHONY pattern
# rules. More detail below.
SOURCES_TEX = __PAPER.tex __PRESENTATION.tex __POSTER.tex handout.tex

#--------------------------------------- Configuration that _should_ be static
DIR_TOP     = $(abspath .)
DIR_BUILD   = $(DIR_TOP)/build
DIR_SRC     = $(DIR_TOP)/src
DIR_FIG     = $(DIR_SRC)/figures
DIR_FIG_R   = $(shell find -L $(DIR_FIG) -type d)
DIR_BAK     = $(DIR_SRC)/bak
DIR_CB      = $(DIR_TOP)/submodules/palette-art
DIR_TEX     = $(DIR_SRC) \
	$(DIR_FIG_R) \
	$(DIR_SRC)/templates \
	$(DIR_CB)/latex \
	$(DIR_BUILD)/standalone
DIR_BIB     = $(DIR_BUILD) $(DIR_TOP) $(DIR_TOP)/src/bib
DIR_SCRIPTS = $(DIR_TOP)/scripts

SVG         = $(notdir $(shell find -L $(DIR_FIG_R) | grep "\.svg"))
TARGETS_EPS = $(SVG:%.svg=$(DIR_BUILD)/%.eps)
SUPPORT_TEX = $(DIR_CB)/latex/colorbrewer.tex
TARGETS_PDF = $(SOURCES_TEX:%.tex=$(DIR_BUILD)/%.pdf)
TARGETS_PS  = $(SOURCES_TEX:%.tex=$(DIR_BUILD)/%.ps)
TARGETS_OPT = $(TARGETS_PDF:%.pdf=%-opt.pdf)
TARGETS_TXT = $(TARGEST_PDF:%.pdf=%.txt)

ALL_TEX     = $(shell find $(DIR_SRC) -type f -name *.tex)

SPACE       = $(EMPTY) $(EMPTY)

LATEXMK_PDF = latexmk \
	-pdf \
	-latexoption="--shell-escape -halt-on-error -file-line-error" \
	-bibtex \
	-time \
	-outdir=$(DIR_BUILD)
LATEXMK_PS  = latexmk \
	-ps \
	-latexoption="--shell-escape -halt-on-error -file-line-error" \
	-bibtex \
	-time \
	-outdir=$(DIR_BUILD)
GS_OPT      = gs \
	-sDEVICE=pdfwrite \
	-dNOPAUSE \
	-dBATCH
ENV         = env TEXINPUTS="$(TEXINPUTS)$(subst $(SPACE),:,$(DIR_TEX)):" \
	BIBINPUTS="$(BIBINPUTS)$(subst $(SPACE),:,$(DIR_BIB)):"

vpath %.tex $(DIR_TOP)/src
vpath %.svg $(DIR_FIG_R)

.PHONY: all abbreviations clean format format-build noformat-build ps \
	optimized page-limit refresh-mupdf standalone go-for-it

# Default target. This should either be set to build all targets with
# LaTeX formatting cleanup (format-build) OR to just build without
# cleanup (noformat-build)
all: noformat-build

# Dump out a list of all the abbreviations found in the paper
abbreviations: $(DIR_BUILD)/__PAPER.txt
	grep -o "[A-Z]\{2\}[A-Z]\+" $< | sort | uniq

# Top-level build target that runs format (cleanup all source files
# into a "nice" format good for version control) before building
format-build: format noformat-build
	@echo "########################################"
	@echo "# WARNING"
	@echo "########################################"
	@echo "# You just ran a \`format-build\` which converts source files"
	@echo "# to one-sentence-per-line format. Copies of the _most recent_"
	@echo "# originals were save in *.bak"
	@echo "########################################"

# Top-level build target that will build all targets without source
# file cleanup
noformat-build: refresh-mupdf page-limit signoff

# mupdf will refresh on a SIGHUP, so we send a SIGHUP to all
# instances of mupdf that we find
refresh-mupdf: $(TARGETS_PDF)
	pgrep mupdf | xargs -n 1 -I PID kill -SIGHUP PID 2>&1 > /dev/null

# Check that the paper is inside of the page limit
page-limit: $(TARGETS_PDF)
	@echo "########################################"; \
	pdfinfo $(DIR_BUILD)/__PAPER.pdf | grep Pages | sed 's/Pages:[ ]\+//' | \
	xargs -I NUMPAGES echo "# Output pdf is NUMPAGES pages"

# Signoff checks. Check that no \todo's remain, that there aren't any
# question marks (likely an undefined reference), and that all fonts
# are embedded.
signoff: $(TARGETS_PDF)
	@pdftotext $(DIR_BUILD)/__PAPER.pdf - | grep TODO | wc -l | \
	xargs -I TODOLINES echo "# There are TODOLINES lines with \todo"
	@pdftotext $(DIR_BUILD)/__PAPER.pdf - | grep ?? | wc -l | \
	xargs -I UNDEF echo "# There are UNDEF lines with \"??\"s"
	@pdffonts $(DIR_BUILD)/__PAPER.pdf | tail -n+3 | awk '{print $$5}' | \
	grep "no" | wc -l | xargs -I NUMUNEMBED \
	echo "# There are NUMUNEMBED unembedded fonts"

# Top-level build target that generates optimized versions of the
# pdfs using GhostScript.
optimized: $(TARGETS_OPT)

# Top-level build target that generates optimized versions of the
# pdfs using GhostScript.
optimized: $(TARGETS_OPT)

# Source file cleanup using fmtlatex. This looks for all .tex files
# that start with 'sec-' in the source directory (files in
# subdirectories of src are ignored, e.g., figures) and pushes them
# throgh fmtlatex which will convert them to a one sentence per line
# structure. Backups _of_the_most_recent_version_ONLY_ are made with a
# .bak suffix.
format:
	find src -maxdepth 1 | grep "^.*\?sec-.\+\?\.tex$$" | sed "s/src\///" |\
	xargs -I TEX sh -c \
	'cp $(DIR_SRC)/TEX $(DIR_BAK)/TEX.bak && $(DIR_SCRIPTS)/fmtlatex -n 2 $(DIR_BAK)/TEX.bak > $(DIR_SRC)/TEX'

# Postscript target. This is currently NOT WORKING.
ps: $(TARGETS_PS)

# Regenerate the Makefile if anything has changed with the
# configuration
$(DIR_TOP)/Makefile: $(DIR_TOP)/Makefile.in $(DIR_TOP)/CONFIG.m4
	m4 $(DIR_TOP)/CONFIG.m4 $(DIR_TOP)/Makefile.in > $(DIR_TOP)/Makefile

# The default present target uses `pdfpc` (https://github.com/pdfpc/pdfpc)
present: all pdfpc

pdfpc: $(DIR_BUILD)/__PRESENTATION.pdfpc
	pdfpc $(DIR_BUILD)/__PRESENTATION.pdf

# A fallback presentation mode uses impressive
# (http://impressive.sourceforge.net), however, this project doesn't
# appear to be maintained.
impressive: all
	impressive -T 0 -g $(shell xrandr_present_resolution) -ff -B 0 -c memory $(DIR_BUILD)/__PRESENTATION.pdf

# Generate standalone figures and tables
standalone: $(ALL_TEX) | $(DIR_BUILD)/standalone
	cat $^ | $(DIR_SCRIPTS)/standalone-figs
	for file in $(shell ls $(DIR_BUILD)/standalone/fig-standalone-*.tex); do \
	  $(ENV) $(LATEXMK_PDF) $$file; \
	done

# These build rules need to be run every time as the Makefile cannot
# figure out the dependencies, but latexmk can. These use the Tom
# Cruise standby, "Go... for it." "You certainly did."
$(DIR_BUILD)/%.pdf: %.tex $(TARGETS_EPS) $(SUPPORT_TEX) $(DIR_TOP)/Makefile go-for-it
	$(ENV) $(LATEXMK_PDF) $<
$(DIR_BUILD)/%.ps: %.tex $(TARGETS_EPS) $(SUPPORT_TEX) $(DIR_TOP)/Makefile go-for-it
	$(ENV) $(LATEXMK_PS) $<
$(DIR_BUILD)/%-opt.pdf:$(DIR_BUILD)/%.pdf go-for-it
	$(GS_OPT) -sOutputFile=$@ $<

# Untested target that embeds fonts. To check for embedded fonts, I
# can use the following bash one-liner:
#   if [[ -n `pdffonts 2014_delaware.pdf | tail -n +3 | awk '{print $5}' | grep no` ]]; then echo "Unembedded"; fi
$(DIR_BUILD)/%-embed.pdf: $(DIR_BUILD)/%.pdf
	gs \
	-dBATCH \
	-dNOPAUSE \
	-sDEVICE=pdfwrite \
	-sOutputFile=$@  \
	-dPDFSETTINGS=/prepress \
	-dEmbedAllFonts=true \
	-dSubsetFonts=true \
	-dCompatibilityLevel=1.6 $<

# Fill in src/handout.in with the correct presentation name
$(DIR_SRC)/handout.tex: $(DIR_SRC)/handout.in
	m4 CONFIG.m4 $< > $@

# SVG -> EPS build rules
$(DIR_BUILD)/%.eps: %.svg
	inkscape $< -D -P $@

# Generate TXT output from PDF for signoff checks and page count determination
$(DIR_BUILD)/%.txt: $(DIR_BUILD)/%.pdf
	pdftotext $< $@

# Setup a symlink to the pdfpc notes files if not already present.
# There's no dependency here on having the symlink be valid as we care
# about the symlink, not the file---pdfpc should then just write this
# notes file out to the source directory.
$(DIR_BUILD)/%.pdfpc:
	touch $(DIR_SRC)/__PRESENTATION.pdfpc
	(cd $(DIR_BUILD) && ln -sf ../$(DIR_SRC)/__PRESENTATION.pdfpc)

# Build miscellaneous directories
$(DIR_BUILD)/standalone:
	mkdir $@

clean:
	rm -rf $(DIR_BUILD)/* \
	*.dpth \
	*.pdf \
	*.log \
	*.vrb \
	*.aux \
	*.fdb_latexmk \
	*.dep \
	*.fls \
	$(DIR_SRC)/handout.tex

#--------------------------------------- Colorbrewer Submodule Setup
# Target to generate colorbrewer.tex in the palette-art submodule
# directory
$(DIR_CB)/latex/colorbrewer.tex: $(DIR_CB)/latex/colorbrewer.pl
	make -C $(DIR_CB)/latex

# If the colorbrewer generating perl script doesn't exist, then we
# haven't initialized the git submodule. This target takes care of
# this.
$(DIR_CB)/latex/colorbrewer.pl:
	git submodule init
	git submodule update
